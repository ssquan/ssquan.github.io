<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quan&#39;s Blog</title>
    <link>https://ssquan.github.io/</link>
    <description>Recent content on Quan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Oct 2020 20:15:20 +0800</lastBuildDate>
    
	<atom:link href="https://ssquan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spark Operator 密钥问题</title>
      <link>https://ssquan.github.io/post/spark-operator-bad-certificate/</link>
      <pubDate>Fri, 16 Oct 2020 20:15:20 +0800</pubDate>
      
      <guid>https://ssquan.github.io/post/spark-operator-bad-certificate/</guid>
      <description>这个是一个由问题推动的知识点收集的旅程，记录了问题本身和问题的定位 (Google) 的点滴。在解决问题时，尝试去 Dive Deeper，就会有一些乐趣产生。
你也许刚好没有接触这块的知识点，对，刚好。没有关系，我尝试输出的是一种定位和解决问题的快乐方法。
 背景 你听过 Spark， Maybe 听过 Spark on K8S，但是 Almost not 听过 Spark Operator。Just Remember 这个是个车厂多于轮胎厂的时代，组合创新盛行而有效。Spark Operator 就是 Google Cloud Native 方式在 K8S 上运行 Spark 的组装车。 不多说，上车。
现象 在升级 Spark Operator 后遇到了 Spark Application 无法解析 HDFS namenode service name，报 &amp;quot;Unknown Host&amp;quot; 的错误。前方说我们 十万火急，需要立刻解决，不解决就影响项目进度了。耳熟？对，我们遇到的问题 4 个 9 以上面的话结尾。First，calm down。
线索  从表象上看，最直接的问题是在 Spark Driver 中没有 HDFS 的配置文件： hdfs-site.xml； 从 Pod 的信息中可以看到 HDFS 配置 Volume 未挂载； 查看 Spark Operator 的 Log，有一行可疑信息&amp;quot;Bad Certificate&amp;quot; 。  信息 因为 &amp;quot;Bad Certificate&amp;quot; 能给我们的信息可能很关键，但是并不直观，没有直接说明是谁和谁之间通信的证书不对，所以本次定位是采用从 Volume 挂载的地方入手。平常喜欢的方式是 从现象到理论到代码 的方式进行递进。先顺着线索收集了相关的理论信息。</description>
    </item>
    
    <item>
      <title>Presto导出数据到Mysql</title>
      <link>https://ssquan.github.io/post/presto-insert-mysql/</link>
      <pubDate>Wed, 16 Sep 2020 20:15:20 +0800</pubDate>
      
      <guid>https://ssquan.github.io/post/presto-insert-mysql/</guid>
      <description>故事的开始 一个咖啡劲儿已经消退了的午后，业务大大突然笑眯眯的对我说: &amp;ldquo;Presto insert Mysql 特别慢，跑了几十分钟了，一直 13% 左右， 你，帮忙看看？&amp;quot;。第一反应就是: &amp;ldquo;嗯？难道出大问题了？&amp;quot;，老实讲，有一点点小兴奋。
一顿操作猛如虎 紧接着，大概进行了如下几个猛如虎的操作：
 Presto 监控看起来，嗯～有一个 Stage 很慢，但是又没有死，大概十几K Row/s 的速度在爬行； Mysql 监控看起来，哦？CPU 低很，内存不大，磁盘占用率和 IO 都不高，网络更别说了，不忙； Presto 进程在搞啥这么慢？Jstack 一下，stack 就是在 write 的地方，没毛病； Mysql 的信息再稍微捞一捞。  果然不出所料，并没那么 easy 就看到原因，再来一杯咖啡提提神吧。
来自大自然的猜想 提神醒脑之后开始整理思路（&amp;amp; YY）。基本确定的是：
 两个系统都没有发生什么异常，他们在正常的工作，只是慢； 资源不紧张，看起来不是瓶颈，深度怀疑是有竞争了。  难道是有锁竞争？Show Create Table 还真有一点小小的惊喜，内容是这样的（ 已脱敏）：
| mock_id_cross_index | CREATE TABLE `mock_id_cross_index` ( `id` bigint(20) DEFAULT NULL, `c1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL , `c2` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `c3` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL, `c4` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `c5` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `c6` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `c7` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `c8` bigint(20) DEFAULT NULL, PRIMARY KEY (`c1`), KEY `AK_c1` (`c2`) USING BTREE, KEY `AK_c2` (`c3`) USING BTREE, KEY `AK_c3` (`c4`) USING BTREE, KEY `AK_c4` (`c5`) USING BTREE, KEY `AK_c5` (`c6`) USING BTREE 先卖个关子，不说明这里主要的坑。但是满眼的索引很可疑。</description>
    </item>
    
    <item>
      <title>数据治理</title>
      <link>https://ssquan.github.io/post/data-governace/</link>
      <pubDate>Thu, 13 Aug 2020 20:10:15 +0800</pubDate>
      
      <guid>https://ssquan.github.io/post/data-governace/</guid>
      <description>数据治理的建设难点 Meta data 元数据是数据资产的基石，元数据的几层认知：
 Data Catalog Data Lineage  典型的开源系统：Apache Atlas，依赖的核心技术是 存储关系的图数据库 和 支持数据检索的数据库，例如 Hbase
数据安全 数据安全问题涉及到认证、鉴权、脱敏（Data Mask）等问题。常见的实施位置：
 查询层，是在查询层进行屏蔽，其灵活性比在存储层屏蔽高。 存储层，如果是特别敏感，任何用户，甚至数据开发不可见的信息可以在存储成就进行脱敏；  脱敏的难点：
 在大文本内容中进行脱敏，这种模式的粒度比基于字段的粒度要高，例如要在大文本中脱敏掉姓名。   Data Quality 数据质量有大的质量体系，各行业也有具体的标准，质量保证、质量控制体系的建设需要注意的是保留开放性，能方便的进行增强和修改。
Data Asset 数据知产的关键核心在于能体现数据的价值，数据成本和核算暂时没有看到相关的建设，还处于理论层面。有很多数据资产的产品实际是在体现业务层的元数据，行业内的数据资产个人观点是需要更多时间沉淀。
数据治理的大数据知识 围绕数据治理的各部分内容，梳理其对数据存储和检索的需求场景。
Apache Ranger 作为数据安全领域的开源组件，提供基于 &amp;ldquo;Resource-User-Operation&amp;rdquo; 三者的权限定义模式，加上权限 ACL 的方式实现权限控制。特点：
 ACL 采用黑白名单结合的方式进行定义，可以灵活选择是白名单优先还是黑名单优先； 基于 Resource 资源的鉴权可以同步到 Resource 侧进行 Cache，单 Resource 只需要关注自己资源对应的权限，是一种Cache 策略，也会带来Cache 策略的缓存同步问题； Audit 审计功能，提供了类似 Solr，Hdfs 等方式，其主要的模式就是将日志写入到分布式存储 or 本地文件，不会回送给Admit； 根据用户查询权限的方式会有查询性能不高，内部用户场景应该是已经基本适用了。 支持数据脱敏  思考；
 相比于 Sql Gateway 的单输入点控制模式，其架构复杂，但是可以从原理侧防止开发人员直接访问引擎，数据是否对开发可见是鉴权设计需要考虑的点； 公有云的 AK 模式鉴权，似乎是完全基于 DB 的认证服务模式，会有性能瓶颈么？  Apache Atlas 数据血缘的重要组件，以插件化图数据库和元数据库的TiTan为核心，提供的核心功能：</description>
    </item>
    
  </channel>
</rss>